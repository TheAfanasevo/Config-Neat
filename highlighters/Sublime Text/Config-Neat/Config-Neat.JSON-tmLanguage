{
    "comment": "Config::Neat Syntax", 
    "fileTypes": [
        "nconf",
        "neat"
    ], 
    "foldingStartMarker": "(/\\*|(\\{|\\[|\\()\\s*$)", 
    "foldingStopMarker": "(\\*/|^\\s*(\\}|\\]|\\)))", 
    "keyEquivalent": "^~N", 
    "name": "Config-Neat", 
    "patterns": [
        {
            "comment": "Known constants that are considered TRUE",
            "match": "\\s{2,}(YES|Y|ON|TRUE|1)\\b",
            "captures": {
                "1": {
                    "name": "constant.language.boolean.true.nconf"
                }
            }
        }, 
        {
            "comment": "Known constants that are considered FALSE",
            "match": "\\s{2,}(NO|N|OFF|FALSE|0)\\b",
            "captures": {
                "1": {
                    "name": "constant.language.boolean.false.nconf"
                }
            }
        }, 
        {
            "comment": "Escaped backtick",
            "match": "\\\\`", 
            "name": "constant.character.escape.nconf"
        }, 
        {
            "comment": "Text inside backticks",
            "begin": "`", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.nconf"
                }
            }, 
            "end": "`", 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.nconf"
                }
            }, 
            "name": "string.quoted", 
            "patterns": [
                {
                    "comment": "Escaped backtick",
                    "match": "\\\\`", 
                    "name": "constant.character.escape.nconf"
                }
            ]
        }, 
        {
            "comment": "Single-line comments: #... (there should be a whitespace or beginning of the line before #)",
            "begin": "(^|\\s)#", 
            "end": "$", 
            "name": "comment.line.nconf"
        }, 
        {
            "comment": "Block comments: /* ... */",
            "begin": "/\\*", 
            "end": "\\*/", 
            "name": "comment.block.nconf"
        }, 
        {
            "comment": "Different coloring for '@whatever' key names",
            "match": "(?:^|{)(?:\\s*)(@)([^\\s\\/#{}`]+)(#[^\\s\\/#{}]+)?",
            "captures": {
                "0": {
                    "name": "variable.parameter.function.nconf"
                }
            }
        }, 
        {
            "comment": "Different coloring for '-whatever' key names",
            "match": "(?:^|{)(?:\\s*)(-)([^\\s\\/#{}`]+)(#[^\\s\\/#{}]+)?",
            "captures": {
                "0": {
                    "name": "keyword.operator.nconf"
                }
            }
        }, 
        {
            "comment": "Different coloring for '+whatever' key names",
            "match": "(?:^|{)(?:\\s*)(\\+)([^\\s\\/#{}`]+)(#[^\\s\\/#{}]+)?",
            "captures": {
                "0": {
                    "name": "entity.name.function.nconf"
                }
            }
        }, 
        {
            "comment": "Different coloring for ':whatever' key names",
            "match": "(?:^|{)(?:\\s*)(\\:)([^\\s\\/#{}`]+)(#[^\\s\\/#{}]+)?",
            "captures": {
                "0": {
                    "name": "constant.other.placeholder"
                }
            }
        }, 
        {
            "comment": "Generic coloring for key names",
            "match": "(?:^|{)(?:\\s*)([^\\s\\/#{}`]+)(#[^\\s\\/#{}]+)?",
            "captures": {
                "0": {
                    "name": "support.constant.nconf"
                }
            }
        }, 
        {
            "comment": "Curly braces: { ... }",
            "match": "\\{|\\}", 
            "name": "meta.brace.curly.nconf"
        }, 
        {
            "comment": "%whatever% style macro highlighting",
            "match": "%.*?%", 
            "name": "variable.parameter.nconf"
        }
    ], 
    "scopeName": "source.nconf", 
    "uuid": "1faa8f23-8f83-45cb-b566-a340924575c4"
}