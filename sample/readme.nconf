# single-line comment
/*
    multi-line
    comment
*/

top-level-parameter                 value

/*
    The sections (blocks) are grouped using curly braces { ... }.
    Section name can be prepended by a key name and a list of optional parameters.
    These parameters then will become a part of an inner block under an empty key name.
    Note that you can't sepecify parameters without specifying a key name itself.
*/

my_section param1 param2 `param 3`
{
    /*
        Blocks can be nested. If the key name is not specified, it will be assigned
        a unique non-negative integer number automatically, like this: 0, 1, 2, ...

        The section below, thus, will be registered under a key of '0'
    */
    {
        /*
            Key names can consist of any Unicode symbols but whitespace
            and curly braces. Values can be any Unicode symbols. Just make sure
            you store your configuration file as UTF-8 (supported by Config::Neat
            parser by default) or any other Unicode-enabled file format (in which case
            you will need to read the file yorself and pass it to the parser as a string).
        */
        my-key                      value 1
        my:key[1]                   value 2
        anything!goes^#;~(2)        value 3
        clé                         значение

        /*
            The following parameter can be later accessed as an array
            (items are separated by whitespace) or as a single string
            (items are joined using single space).
        */
        some_string_or_array        foo bar baz

        /*
            When you want to make whitespace part of an item, surround it with backticks.
        */
        another_string              `foo bar baz`   # this is always a single string

        /*
            Backticks ` ` indicate "raw" blocks, where whitespace and newlines
            should be preserved. Note that they can be anywhere inside the string,
            so two parameters below should give the same result:
        */
        whitespace_matters_1        `foo    bar`
        whitespace_matters_2        foo`    `bar

        /*
            Inside backticks, one can use `{`, `}` and `#` symbols.
        */
        special_symbols             `foo { bar } #baz`

        /*
            Backticks also allow one to create multiline strings. You can make them nicely padded,
            and when using Config::Neat to_string() method, the leading padding will be detected
            and removed automatically.
        */
        multiline_string            `
                                    foo             # this will be a part of the string, not a comment
                                        bar
                                        baz
                                    etc
                                    `

        /* You can also put backticks on the same line, if you prefer. */

        another_multiline_string   `foo
                                        bar
                                        baz
                                    etc`

        /*
            In order to interpret a value as a boolean one, use Config::Neat as_boolean() method
        */
        boolean_true                YES             # or Y, ON, TRUE or 1
        boolean_false               NO              # actually, you can use any string except the ones above
        empty_boolean_flag                          # when no parameter provided, it defaults to 'YES' (i.e. works as a flag)

        /*
            To explictly set a value to an empty string, use double backticks:
        */
        empty_string                ``

        /*
            You can also use empty strings in arrays.
            If you treat parameter as a string, it will be treated as ` foo   bar`
        */
        array_with_empty_strings    `` foo `` `` bar

        /*
            To emit backtick symbol itself, escape it with a backslash
        */
        backtick                    \`

        /*
            Okay, how does one emits backslash followed by the backtick?
            Should backspaces be escaped as well? No, they shouldn't
            (because we want as little escaping as possible).
            So this will be simply:
        */
        backslash_and_backtick      \\`

        /*
            This means that in all other situations, backslash is a
            normal symbol, which doesn't have to be escaped itself.
            Windows-style paths or regular expressions will remain
            clean and readable:
        */
        windows_style_path          C:\foo\bar
        regular_expression          ^file\.ext$

        /*
            Comments inside values or key names are allowed.
            They are ignored (skipped) without splitting the surrounding key name or value.
        */
        multiline_with_comment      He/* injected */llo,
                                    wor/* comments */ld!

        /*
            If you need to have / followed by * as a part of your value,
            you can enclose the relevant part of the string in backticks:
        */
        comment_as_string_1         `Value with a /* comment-like syntax */`
        comment_as_string_2         Value with a `/*` comment-like syntax */
        /*
            ...or use backticks to break these two symbols apart:
        */
        comment_as_string_3         Value with a /``* comment-like syntax */
    }

    /*
        Below is another entry in my_section block, which will be assigned the key name of '1'
    */
    {
        /*
            Using whitespace for key and value alignment is optional.
            Just one space between key and value will be enough.
        */
        foo bar
        etc pwd

        /*
            Whitespace before and after curly brackets is optional as well
        */
        baz{
            etc{pwd xyz}
        }
    }
}

/*
    There can be multiple keys with the same name
    within one {...} block. Such keys will be merged together into an outer
    array (so the resulting data will be an 'array of arrays' or 'array of blocks')
*/

my_section one {
    my-key                          my value
    my-key-2                        my value 2
}

my_section two {
    my-key                          my value
    my-key-2                        my value 2
}

/*
    Rules below are relevant for highlighting in Sublime Text;
    they do not affect the parsing logic.

    In Sublime Text highlighter for Config::Neat, some key prefixes
    will cause parameters to be colored differently for your convenience.
    It's up to you whether to use this semantics or not
    in your application.
*/

@inherit    /path/to/file   # "@" means some processing instruction
-foo                        # "-" means something negative
+baz        param           # "+" means something positive

/*
    Also, parameters like %foo% are also highlighted
    in a special way:
*/

param       foo %bar% baz

/*
    Also, parameters like %foo% are also highlighted
    in a special way:
*/
